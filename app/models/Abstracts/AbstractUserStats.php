<?php

namespace DS\Model\Abstracts;

/**
 * AbstractUserStats
 * 
 * @package DS\Model\Abstracts
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-12-15, 12:05:47
 */
abstract class AbstractUserStats extends \DS\Model\Base
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=11, nullable=false)
     */
    protected $id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=true)
     */
    protected $userId;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $tablesOwnerCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $rowsOwnerCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $unreadNotificationsCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $contributionsCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $tablesCreatedCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $rejectedChangeRequestsCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $approvedChangeRequestsCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $visitedAddTablePage;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $followerCount;

    /**
     *
     * @var integer
     * @Column(type="integer", length=10, nullable=true)
     */
    protected $upvotesCount;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field userId
     *
     * @param integer $userId
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->userId = $userId;

        return $this;
    }

    /**
     * Method to set the value of field tablesOwnerCount
     *
     * @param integer $tablesOwnerCount
     * @return $this
     */
    public function setTablesOwnerCount($tablesOwnerCount)
    {
        $this->tablesOwnerCount = $tablesOwnerCount;

        return $this;
    }

    /**
     * Method to set the value of field rowsOwnerCount
     *
     * @param integer $rowsOwnerCount
     * @return $this
     */
    public function setRowsOwnerCount($rowsOwnerCount)
    {
        $this->rowsOwnerCount = $rowsOwnerCount;

        return $this;
    }

    /**
     * Method to set the value of field unreadNotificationsCount
     *
     * @param integer $unreadNotificationsCount
     * @return $this
     */
    public function setUnreadNotificationsCount($unreadNotificationsCount)
    {
        $this->unreadNotificationsCount = $unreadNotificationsCount;

        return $this;
    }

    /**
     * Method to set the value of field contributionsCount
     *
     * @param integer $contributionsCount
     * @return $this
     */
    public function setContributionsCount($contributionsCount)
    {
        $this->contributionsCount = $contributionsCount;

        return $this;
    }

    /**
     * Method to set the value of field tablesCreatedCount
     *
     * @param integer $tablesCreatedCount
     * @return $this
     */
    public function setTablesCreatedCount($tablesCreatedCount)
    {
        $this->tablesCreatedCount = $tablesCreatedCount;

        return $this;
    }

    /**
     * Method to set the value of field rejectedChangeRequestsCount
     *
     * @param integer $rejectedChangeRequestsCount
     * @return $this
     */
    public function setRejectedChangeRequestsCount($rejectedChangeRequestsCount)
    {
        $this->rejectedChangeRequestsCount = $rejectedChangeRequestsCount;

        return $this;
    }

    /**
     * Method to set the value of field approvedChangeRequestsCount
     *
     * @param integer $approvedChangeRequestsCount
     * @return $this
     */
    public function setApprovedChangeRequestsCount($approvedChangeRequestsCount)
    {
        $this->approvedChangeRequestsCount = $approvedChangeRequestsCount;

        return $this;
    }

    /**
     * Method to set the value of field visitedAddTablePage
     *
     * @param integer $visitedAddTablePage
     * @return $this
     */
    public function setVisitedAddTablePage($visitedAddTablePage)
    {
        $this->visitedAddTablePage = $visitedAddTablePage;

        return $this;
    }

    /**
     * Method to set the value of field followerCount
     *
     * @param integer $followerCount
     * @return $this
     */
    public function setFollowerCount($followerCount)
    {
        $this->followerCount = $followerCount;

        return $this;
    }

    /**
     * Method to set the value of field upvotesCount
     *
     * @param integer $upvotesCount
     * @return $this
     */
    public function setUpvotesCount($upvotesCount)
    {
        $this->upvotesCount = $upvotesCount;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field userId
     *
     * @return integer
     */
    public function getUserId()
    {
        return $this->userId;
    }

    /**
     * Returns the value of field tablesOwnerCount
     *
     * @return integer
     */
    public function getTablesOwnerCount()
    {
        return $this->tablesOwnerCount;
    }

    /**
     * Returns the value of field rowsOwnerCount
     *
     * @return integer
     */
    public function getRowsOwnerCount()
    {
        return $this->rowsOwnerCount;
    }

    /**
     * Returns the value of field unreadNotificationsCount
     *
     * @return integer
     */
    public function getUnreadNotificationsCount()
    {
        return $this->unreadNotificationsCount;
    }

    /**
     * Returns the value of field contributionsCount
     *
     * @return integer
     */
    public function getContributionsCount()
    {
        return $this->contributionsCount;
    }

    /**
     * Returns the value of field tablesCreatedCount
     *
     * @return integer
     */
    public function getTablesCreatedCount()
    {
        return $this->tablesCreatedCount;
    }

    /**
     * Returns the value of field rejectedChangeRequestsCount
     *
     * @return integer
     */
    public function getRejectedChangeRequestsCount()
    {
        return $this->rejectedChangeRequestsCount;
    }

    /**
     * Returns the value of field approvedChangeRequestsCount
     *
     * @return integer
     */
    public function getApprovedChangeRequestsCount()
    {
        return $this->approvedChangeRequestsCount;
    }

    /**
     * Returns the value of field visitedAddTablePage
     *
     * @return integer
     */
    public function getVisitedAddTablePage()
    {
        return $this->visitedAddTablePage;
    }

    /**
     * Returns the value of field followerCount
     *
     * @return integer
     */
    public function getFollowerCount()
    {
        return $this->followerCount;
    }

    /**
     * Returns the value of field upvotesCount
     *
     * @return integer
     */
    public function getUpvotesCount()
    {
        return $this->upvotesCount;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema("spreadshare");
        $this->setSource("userStats");
        $this->belongsTo('userId', 'DS\Model\Abstracts\User', 'id', ['alias' => 'User']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'userStats';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractUserStats[]|AbstractUserStats|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractUserStats|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

}
