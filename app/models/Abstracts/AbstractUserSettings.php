<?php

namespace DS\Model\Abstracts;

/**
 * AbstractUserSettings
 * 
 * @package DS\Model\Abstracts
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-11-08, 17:05:52
 */
abstract class AbstractUserSettings extends \DS\Model\Base
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=11, nullable=false)
     */
    protected $id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=true)
     */
    protected $userId;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $followDigest;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $topicDigest;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $newProductAnnouncements;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $showTokensOnProfilePage;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field userId
     *
     * @param integer $userId
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->userId = $userId;

        return $this;
    }

    /**
     * Method to set the value of field followDigest
     *
     * @param integer $followDigest
     * @return $this
     */
    public function setFollowDigest($followDigest)
    {
        $this->followDigest = $followDigest;

        return $this;
    }

    /**
     * Method to set the value of field topicDigest
     *
     * @param integer $topicDigest
     * @return $this
     */
    public function setTopicDigest($topicDigest)
    {
        $this->topicDigest = $topicDigest;

        return $this;
    }

    /**
     * Method to set the value of field newProductAnnouncements
     *
     * @param integer $newProductAnnouncements
     * @return $this
     */
    public function setNewProductAnnouncements($newProductAnnouncements)
    {
        $this->newProductAnnouncements = $newProductAnnouncements;

        return $this;
    }

    /**
     * Method to set the value of field showTokensOnProfilePage
     *
     * @param integer $showTokensOnProfilePage
     * @return $this
     */
    public function setShowTokensOnProfilePage($showTokensOnProfilePage)
    {
        $this->showTokensOnProfilePage = $showTokensOnProfilePage;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field userId
     *
     * @return integer
     */
    public function getUserId()
    {
        return $this->userId;
    }

    /**
     * Returns the value of field followDigest
     *
     * @return integer
     */
    public function getFollowDigest()
    {
        return $this->followDigest;
    }

    /**
     * Returns the value of field topicDigest
     *
     * @return integer
     */
    public function getTopicDigest()
    {
        return $this->topicDigest;
    }

    /**
     * Returns the value of field newProductAnnouncements
     *
     * @return integer
     */
    public function getNewProductAnnouncements()
    {
        return $this->newProductAnnouncements;
    }

    /**
     * Returns the value of field showTokensOnProfilePage
     *
     * @return integer
     */
    public function getShowTokensOnProfilePage()
    {
        return $this->showTokensOnProfilePage;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema("spreadshare");
        $this->setSource("userSettings");
        $this->belongsTo('userId', 'DS\Model\User', 'id', ['alias' => 'User']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'userSettings';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractUserSettings[]|AbstractUserSettings|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractUserSettings|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

}
